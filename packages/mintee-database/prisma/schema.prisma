datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL_TEST")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  firstName  String?
  lastName   String?
  social     Json?
  tokens     Token[]
  externalId String?   @unique(length: 100)
  planType   PlanType? @default(FREE)
  NFT        NFT[]
  Tree       Tree[]
  Wallet     Wallet[]

  @@index([externalId])
}

model Wallet {
  id                Int        @id @default(autoincrement())
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @default(now()) @updatedAt
  blockchainAddress String     @db.VarChar(255)
  user              User       @relation(fields: [userExternalId], references: [externalId])
  userExternalId    String
  blockchain        Blockchain
  NFT               NFT[]

  @@index([userExternalId])
}

model NFT {
  id                      Int           @id @default(autoincrement())
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @default(now()) @updatedAt
  name                    String        @db.VarChar(255)
  symbol                  String?       @db.VarChar(255)
  offChainUrl             String?       @db.VarChar(255)
  description             String?       @db.VarChar(255)
  blockchainAddress       String?       @db.VarChar(255)
  sellerFeeBasisPoints    Int           @default(0)
  isMutable               Boolean       @default(false)
  editionNonce            Int?
  tokenStandard           TokenStandard @default(NonFungible)
  blockchain              Blockchain?
  parentNFT               NFT?          @relation("ChildNFT", fields: [parentNFTId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  parentNFTId             Int?
  minteeMinted            Boolean       @default(false)
  creatorUserExternalId   String
  creatorUser             User          @relation(fields: [creatorUserExternalId], references: [externalId])
  isCompressed            Boolean       @default(false)
  Tree                    Tree?         @relation(fields: [treeId], references: [id])
  treeId                  Int?
  isCollection            Boolean       @default(false)
  NFT                     NFT[]         @relation("ChildNFT")
  Creators                Creator[]
  walletId                Int?
  Wallet                  Wallet?       @relation(fields: [walletId], references: [id])
  updateAuthorityAddress  String?       @db.VarChar(255)
  json                    Json?
  primarySaleHappened     Boolean       @default(false)
  verifiedCollectionToken Boolean?      @default(false)

  @@index([parentNFTId])
  @@index([creatorUserExternalId])
  @@index([treeId])
  @@index([walletId])
}

model Creator {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  creatorAddress String   @db.VarChar(255)
  creatorShare   Int
  NFT            NFT[]
}

model Token {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  type              TokenType
  emailToken        String?   @unique // Only used for short lived email tokens
  valid             Boolean   @default(true)
  externalKey       String?   @unique(length: 100)
  user              User?     @relation(fields: [userExternalId], references: [externalId])
  userExternalId    String?
  active            Boolean   @default(false)
  planType          PlanType? @default(FREE)
  nftInfoCallsCount Int       @default(0)
  nftInfoCallsLimit Int       @default(0)
  canMint           Boolean   @default(false)
  mintCallsCount    Int       @default(0)
  mintCallsLimit    Int       @default(0)

  @@index([userExternalId])
}

model Tree {
  id                    Int         @id @default(autoincrement())
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @default(now()) @updatedAt
  name                  String      @db.VarChar(255)
  description           String?     @db.VarChar(255)
  creatorUser           User        @relation(fields: [creatorUserExternalId], references: [externalId])
  creatorUserExternalId String
  blockchain            Blockchain?
  blockchainAddress     String?     @db.VarChar(255)
  nfts                  NFT[]
  minteeMinted          Boolean     @default(false)

  @@index([creatorUserExternalId])
}

enum Blockchain {
  Solana
}

enum TokenType {
  EMAIL // used as a short-lived token sent to the user's email
  API
}

enum PlanType {
  FREE
  PRO
  PREMIUM
  ENTERPRISE
}

enum TokenStandard {
  NonFungible
  FungibleAsset
  Fungible
  NonFungibleEdition
}
