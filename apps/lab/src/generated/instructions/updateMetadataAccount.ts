/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Option,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { Creator, CreatorArgs, getCreatorSerializer } from '../types';

// Accounts.
export type UpdateMetadataAccountInstructionAccounts = {
  /** Metadata account */
  metadata: PublicKey;
  /** Update authority key */
  updateAuthority?: Signer;
};

// Arguments.
export type UpdateMetadataAccountInstructionData = {
  discriminator: number;
  data: Option<{
    name: string;
    symbol: string;
    uri: string;
    sellerFeeBasisPoints: number;
    creators: Option<Array<Creator>>;
  }>;
  newUpdateAuthority: Option<PublicKey>;
  primarySaleHappened: Option<boolean>;
};

export type UpdateMetadataAccountInstructionDataArgs = {
  data: Option<{
    name: string;
    symbol: string;
    uri: string;
    sellerFeeBasisPoints: number;
    creators: Option<Array<CreatorArgs>>;
  }>;
  newUpdateAuthority: Option<PublicKey>;
  primarySaleHappened: Option<boolean>;
};

export function getUpdateMetadataAccountInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  UpdateMetadataAccountInstructionDataArgs,
  UpdateMetadataAccountInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    UpdateMetadataAccountInstructionDataArgs,
    UpdateMetadataAccountInstructionData,
    UpdateMetadataAccountInstructionData
  >(
    s.struct<UpdateMetadataAccountInstructionData>(
      [
        ['discriminator', s.u8()],
        [
          'data',
          s.option(
            s.struct<any>(
              [
                ['name', s.string()],
                ['symbol', s.string()],
                ['uri', s.string()],
                ['sellerFeeBasisPoints', s.u16()],
                ['creators', s.option(s.array(getCreatorSerializer(context)))],
              ],
              { description: 'Data' }
            )
          ),
        ],
        ['newUpdateAuthority', s.option(s.publicKey())],
        ['primarySaleHappened', s.option(s.bool())],
      ],
      { description: 'UpdateMetadataAccountInstructionData' }
    ),
    (value) =>
      ({ ...value, discriminator: 1 } as UpdateMetadataAccountInstructionData)
  ) as Serializer<
    UpdateMetadataAccountInstructionDataArgs,
    UpdateMetadataAccountInstructionData
  >;
}

// Instruction.
export function updateMetadataAccount(
  context: Pick<Context, 'serializer' | 'programs' | 'identity'>,
  input: UpdateMetadataAccountInstructionAccounts &
    UpdateMetadataAccountInstructionDataArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenMetadata',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Resolved accounts.
  const metadataAccount = input.metadata;
  const updateAuthorityAccount = input.updateAuthority ?? context.identity;

  // Metadata.
  keys.push({
    pubkey: metadataAccount,
    isSigner: false,
    isWritable: isWritable(metadataAccount, true),
  });

  // Update Authority.
  signers.push(updateAuthorityAccount);
  keys.push({
    pubkey: updateAuthorityAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(updateAuthorityAccount, false),
  });

  // Data.
  const data =
    getUpdateMetadataAccountInstructionDataSerializer(context).serialize(input);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
